#!/bin/bash

# global variables not configurable in .conf file
programename="lamp"
parameter1=$1
parameter2=$2
configpath="./$programename.conf"
required_config_variables=("vm_domain" "vm_user" "vm_ip" "site" "terminal" "browser" "inputCssNames" "outputCssNames")

# colors for text
text_white="\e[0m"
text_red="\e[31m"
text_blue="\e[34m"
text_yellow="\e[33m"

# outline:
#   input commands:
#       lamp start: starts vm and all necessary services, then open appropriet editors, logs and sites 
#       lamp continue: open editors and logs from current terminal
#       lamp reload: reloads apache2 on vm
#       lamp restart: reboots vm then start all necessary services
#       lamp restart web: restart apache2 on vm
#       lamp stop: shutdown vm and libvirtd, then close appropriet editors, logs and sites
#       lamp stop vm: shutdown vm host only
#       lamp status: show status of vm, site, apache2, mysql...
#       lamp config: opens configuration file
#      
#       config required info: vm name, vm ip, to be enabled site name, web browser to use, terminal command
#       automatically aquire info: whether vm is running, whether required systemd services are running


# ==============================================================================================================================
# configuration retrieval
terminate_with_error () {
    echo -e "${text_red}Program terminating with final error: \n${1} ${text_white}"
    exit 1
}

retrieveConfig() {
    if [ -f $configpath ]; then
        source $configpath
        local missing
        missing=false
        for var in "${required_config_variables[@]}"; do
            if ! [[ -v $var ]]; then
                echo -e "${text_red}variable '$var' is missing${text_white}"
                local missing=true
            fi
        done

        if $missing; then
            terminate_with_error "Config file is missing variables \nCheck 'required_config_variables' at the start of this script for all variables needed"
        fi
    else
        terminate_with_error "${programename} cannot run without the config file \nMake sure an appropriate path is assigned to the varaible 'configpath' at the start of this script$"
    fi
}

retrieveConfig

# ==============================================================================================================================
# basic functions that don't rely on any other functions defined in the program

# "check_try_repeate" is for functions whose return value is not reflective of operation's result, needing to be tested against a seperate condition
# "check_try_repeate" also expects the action to be critical, so failiure after the specified amount of tries will terminate the program
# $1 is a condition function which returns a boolean
# $2 is the action function to attempt if condition is not met. 
# $3 is an integer that keeps track of the number of tries
# $4 takes in the return message of the previous operation
check_try_repeate () {
    local condition_value
    condition_value=$($1)
    echo "trying $3"
    if [ "$condition_value" = 1 ] ; then
        echo 1
    elif [ "$condition_value" = 0 ] ; then
        if [ "$3" = 0 ] ; then
            # echo 0;
            terminate_with_error "$4"
        else
            local return_value
            local remaining_tries=$(( $3 - 1))
            return_value=$($2)
            check_try_repeate "$1" "$2" "$remaining_tries" "$return_value"
        fi
    fi
}

# gives integer values for state of the vm, where:
# value "1" means vm
check_vm_domain () {
    local state
    state=$(sudo virsh domstate "$vm_domain")
    case "${state}" in
        "running")
            echo 1
            ;;
        "paused")
            echo 2
            ;;
        "shut off")
            echo 0
            ;;
        *)
            terminate_with_error "unexpected vm state '$state', exiting"
            ;;
    esac
}

#pass the service name as the $1 (first) argument
check_systemd () {
    local state
    state=$(systemctl is-active "$1")
    if [ "$state" = "active" ]; then
        echo 1
    else 
        echo 0
    fi
}

# ==============================================================================================================================
# general functions

# "resume_vm" ensures vm is unsuspended
resume_vm () {
    action_function () {
        sudo virsh resume "$vm_domain"
    }
    condition_function () {
        local condition_vm_state
        condition_vm_state=$(check_vm_domain)
        if [ "$condition_vm_state" = 1 ]; then
            echo 1
        else
            echo 0
        fi
    }
    action_function
    check_try_repeate condition_function action_function 3
}



# "start_vm" ensures vm is running
start_vm () {
    local vm_state
    vm_state=$(check_vm_domain)
    if [ "$vm_state" = 0 ] ; then
        action_function () {
            sudo virsh start "$vm_domain"
        }
        action_function
        check_try_repeate check_vm_domain action_function 3
    else
        if [ "$vm_state" = 2 ] ; then
            echo -e "${text_yellow}vm was suspended, now resuming${text_white}"
            sudo virsh resume "$vm_domain"
        else
            echo -e "${text_yellow}$vm_domain already running${text_white}"
        fi
    fi
}

# "start_libirtd" ensures libvirtd is running
start_libvirtd () {
    local libvirtd_state
    libvirtd_state=$(check_systemd "libvirtd")
    if [ "$libvirtd_state" = 0 ] ; then
        echo starting libvirtd
        action_function () {
            sudo systemctl start libvirtd
        }
        condition_function () {
            check_systemd libvirtd
        }
        action_function
        check_try_repeate condition_function action_function 3
    else
        echo -e "${text_yellow}libvirtd.service is already running${text_white}"
    fi
}


# "stop_vm" ensures vm is shut down gracefully
stop_vm () {
    local vm_state
    vm_state=$(check_vm_domain)
    if [ "$vm_state" = 0 ]; then
        echo -e "${text_yellow}$vm_domain not running${text_white}"
    else
        if [ "$vm_state" = 2 ]; then
            resume_vm
        fi
        action_function () {
            echo "trying to stop vm"
            sudo virsh shutdown "$vm_domain"
        }
        condition_function () {
            local condition_vm_state
            condition_vm_state=$(check_vm_domain)
            if [ "$condition_vm_state" = 0 ]; then
                echo 1
            else
                echo 0
            fi
        }
        action_function
        check_try_repeate condition_function action_function 3
    fi
}

# "stop_libvirtd" ensures vm_domain is shutoff before stopping libvirtd.socket and libvirtd
stop_libvirtd () {
    local service
    local service_state
    service="libvirtd"
    service_state=$(check_systemd $service)
    if [ "$service_state" = 1 ]; then
            echo "stopping libvirtd"
            action_function() {
                stop_vm
                echo stopping libvirtd
                sudo systemctl stop libvirtd.socket
                sudo systemctl stop libvirtd
            }
            condition_function() {
                local condition_service_state
                condition_service_state=$(check_systemd "$service")
                if [ "$condition_service_state" = 0 ]; then
                    echo 1
                else
                    echo 0
                fi
            }
            action_function
            check_try_repeate condition_function action_function 3
    else
        echo -e "${text_yellow}libvirtd.service is not running${text_white}"
    fi
}





# ==============================================================================================================================
# parameter handlers

test_function () {
    echo -e "${text_blue}doing test:${text_white}"
    echo
    resume_vm
}

start_function () {
    echo 'lamp start: starts vm and all necessary services, then open appropriet editors, logs and sites'
    echo
    start_libvirtd
    start_vm
}

stop_function () {
    echo "lamp stop: shutdown vm, then close appropriet editors, logs and sites"
    echo
    stop_libvirtd
}

status_function () {
    echo lamp status: show status of vm, site, apache2, mysql...
    echo
}

# ==============================================================================================================================
# checking for paramenters

case "${parameter1}" in
    "start")
        start_function
        ;;
    "continue")
        echo lamp continue: open editors and logs from current terminal
        ;;
    "reload")
        echo reloads apache2 on vm
        ;;
    "restart")
        if [ "$parameter2" = "web" ]; then
            echo restarts apache2 on vm
        else
            echo reboots vm then start all necessary services
        fi
        ;;
    "stop")
        if [ "$parameter2" = "vm" ]; then
            echo shutdown vm host only
        else
            stop_function
        fi
        ;;
    "status")
        status_function
        ;;
    "config")
        echo lamp config: opens configuration file
        ;;
    "test")
        test_function
        ;;
    *)
        echo "${option} not recognised"
        echo "
    lamp start: starts vm and all necessary services, then open appropriet editors, logs and sites
    lamp continue: open editors and logs from current terminal
    lamp reload: reloads apache2 on vm
    lamp restart: reboots vm then start all necessary services
    lamp restart web: restart apache2 on vm
    lamp stop: shutdown vm, then close appropriet editors, logs and sites
    lamp stop vm: shutdown vm host only
    lamp status: show status of vm, site, apache2, mysql...
    lamp config: opens configuration file"
        ;;
esac

# ==============================================================================================================================
# end of script