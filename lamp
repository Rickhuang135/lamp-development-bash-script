#!/bin/bash

     
# config required info: vm name, vm ip, to be enabled site name, web browser to use, terminal command
# automatically aquire info: whether vm is running, whether required systemd services are running

# global variables not configurable in .conf file
programename="lamp"
parameter1=$1
parameter2=$2
parameter3=$3
configpath="/etc/$programename.conf"
required_config_variables=("vm_domain" "vm_user" "vm_ip" "vm_network_name" "site" "terminal" "browser" "inputCssNames" "outputCssNames")
remote_systemd_services=("apache2" "mysql")

# special codes for text
text_white="\e[0m"
text_red="\e[31m"
text_blue="\e[34m"
text_yellow="\e[33m"
text_green="\e[32m"
line_clear="\033[0K\r"

# ==============================================================================================================================
# essential functions, those used by nearly every part of the program 

terminate_with_error () {
    echo -e "${text_red}Program terminating with final error: \n${1} ${text_white}"
    exit 1
}

# "check_wait_repeate" is for checking a condition repeatedly at specified intervals, inorder to ensure a command has fully completed
# $1 is the condition function
# $2 is the timeout interval
# $3 is the number of timeouts
check_wait_repeate () {
    sleep "$2"
    local condition_value
    condition_value=$($1)
    if [ "$condition_value" = 1 ] ; then
        echo -e "${line_clear}${text_green}completed${text_white}                  \n"
    elif [ "$condition_value" = 0 ] ; then
        if [ "$3" = 0 ] ; then
            echo -e "${line_clear}${text_red}timed out${text_white}                 \n";
            terminate_with_error "condition not met"
        else
            local time_remaining
            time_remaining=$(python3 -c "print(round(${2} * ${3}, 1))")
            echo -en "${line_clear}${time_remaining} seconds until timeout"
            local remaining_intervals=$(( $3 - 1 ))
            check_wait_repeate "$1" "$2" "$remaining_intervals"
        fi
    fi
}

# "$spread_values" parses concatinated input to create the appropriet global variables
# $1 is the input
# $2 is the assignment function, into which each entry is passed
    spread_values () {
        IFS=' ' read -r -a config_array <<< "$1"
        
        for entry in "${config_array[@]}";
        do
            local parameter_name argument_value
            parameter_name=${entry%%'='*}
            argument_value=$(( ${#parameter_name} + 2 ))
            argument_value=$(echo "$entry" | cut -c"$argument_value"-${#entry})
            $2 "$parameter_name" "$argument_value"
        done
    }
# ==============================================================================================================================
# remote operations to be done over ssh on the vm

# pass the service name as the $1 (first) argument
check_systemd () {
    local state
    state=$(systemctl is-active "$1")
    if [ "$state" = "active" ]; then
        echo 1
    else 
        echo 0
    fi
}

# $parameter1 is the remote command
# $parameter2 describes the action to be taken
# $parameter3 is a concatinated string containing config information,
# i.e "site=placeholder.com inputCssNames=input.css outputCssNames=output.css,main.css"
remote_function () {

    # "single_out" determines if multiple entries exist, then returns one result
    # $1 is the string to be parsed
    # $2 is the IFS seperator used to identify the number of entries
    single_out () {
        local bah1
        bah1=$(echo "$1" | tr "$2" ' ')
        IFS=' ' read -r -a array1 <<< "$bah1"
        echo "${array1[0]}"
    }

    # "check_site" returns a boolean representing whether a site is enabled assuming it exists
    # $1 is the exact site name
    check_site () {
        local response
        response=$(sudo a2query -s | grep "$exact_site")
        if [ -z "$response" ] ; then
            echo 0
        else
            echo 1
        fi
    }

    #"find_magento" determines if the apache2 site uses magento
    find_magento() {
        file="${1}/bin/magento"
        if [ -f "$file" ]; then
            echo magento module detected under "${1}"
            echo
        fi
    }

    # parameter_name is passed into $1, and argument_value is passed into $2
    assignment_function () {
        case "$1" in
            "site")
                site=$2
                ;;
            "inputCssNames")
                IFS=',' read -r -a inputCssArray <<< "$2"
                ;;
            "outputCssNames")
                IFS=',' read -r -a outputCssArray <<< "$2"
                ;;
        esac
    }
    spread_values "$parameter3" assignment_function

    local apache2_path;
    apache2_path="/etc/apache2/sites-available/"
    local apache_site_file
    apache_site_file=$(find ${apache2_path} -name "*${site}*")
    apache_site_file=$(single_out "$apache_site_file" "\n")

    if [ -z "$apache_site_file" ]; then
        terminate_with_error "$site not found! make sure appropriet file exists in $apache2_path directory on the vm, or choose a different domain to open with '$programename config'"
    fi

    # directory has to be found so that magento can be found, which is needed because magento determines systemd services
    local directory prefix
    directory=$(grep -i "Directory" "$apache_site_file")
    prefix=${directory%%'"'*}
    prefix=$(( ${#prefix} + 2 ))
    directory=$(echo "$directory" | cut -c$prefix-${#directory})
    directory=${directory%%'"'*}

    if ! test -d "$directory"; then
        echo -e "${text_red}could not locate valid directory in apache2 site configuration file${text_white}"
    else
        # find_magento needs to happen before the switch statement because it may add "elasticsearch" to "remote_systemd_services"
        local find_magento_result
        find_magento_result=$(find_magento "$directory")

        if [ -n "$find_magento_result" ]; then
            echo "$find_magento_result"
            remote_systemd_services+=("elasticsearch")
        fi
    fi

    local exact_site
    exact_site=${apache_site_file#"$apache2_path"}
    exact_site=${exact_site%%'.conf'}
    
    case "$parameter2" in
        "start")
            if [ "$(check_site)" = 1 ]; then
                echo -e "${text_yellow}site '$exact_site' is already enabled${text_white}"
            else 
                echo "enabling $exact_site"
                sudo a2ensite "$exact_site" > /dev/null 2>&1
                check_wait_repeate check_site 0.2 5
                if [ "$(check_systemd apache2)" = 1 ]; then
                    sudo systemctl reload apache2
                fi
            fi
            for k in "${remote_systemd_services[@]}"
            do
                local systemd_state
                systemd_state=$(check_systemd "$k")
                if [ "$systemd_state" = 1 ]; then
                    echo -e "${text_yellow}${k}.service is already active${text_white}"
                else
                    echo "starting ${k}.service"
                    sudo systemctl start "$k"
                    condition_function () {
                        check_systemd "$k"
                    }
                    check_wait_repeate condition_function 0.5 10
                fi
            done
            ;;
        "stop")
            if [ "$(check_site)" = 1 ]; then
                echo "disablling $exact_site"
                sudo a2dissite "$exact_site" > /dev/null 2>&1
                condition_function () {
                    local status
                    status=$(( 1 - $(check_site) ))
                    echo $status
                }
                check_wait_repeate condition_function 0.2 5
            else 
                echo -e "${text_yellow}site '$exact_site' is already disabled${text_white}"
            fi
            for k in "${remote_systemd_services[@]}"
            do
                local systemd_state
                systemd_state=$(check_systemd "$k")
                if [ "$systemd_state" = 1 ]; then
                    echo "stopping ${k}.service"
                    sudo systemctl stop "$k"
                    condition_function () {
                        local status
                        status=$(( 1 - $(check_systemd "$k") ))
                        echo $status
                    }
                    check_wait_repeate condition_function 0.5 5
                else
                    echo -e "${text_yellow}${k}.service is inactive${text_white}"
                fi
            done
            ;;
        "continue")
            local remote_paths error_log_path
            remote_paths="{remote_paths}working_directory=${directory}"
            error_log_path=$(grep -i "ErrorLog" "$apache_site_file")
            if [ -n "$error_log_path" ]; then
                error_log_path=${error_log_path#"ErrorLog "}
                if [[ "$error_log_path" =~ '${APACHE_LOG_DIR}' ]]; then
                    local variable_path
                    variable_path=$(grep APACHE_LOG_DIR /etc/apache2/envvars)
                    variable_path=${variable_path#*=}
                    variable_path=${variable_path%%'$'*}
                    error_log_path=${error_log_path#'${APACHE_LOG_DIR}'}
                    error_log_path="${variable_path}${error_log_path}"
                    remote_paths="$remote_paths error_log=${error_log_path}"
                else
                    remote_paths="$remote_paths $error_log_path"
                fi
            fi

            if [ -z "$directory" ]; then
                terminate_with_error "no relevant action can be taken because a working directory was not found"
            else
                # take action to identify additional directories
                local findtailwindcss
                findtailwindcss=$(find . -type f -name "tailwind.config.js")
                if [ -n "$findtailwindcss" ]; then
                    echo "tailwind CSS configuration file found under ${directory}"
                    # searches for input and output files of tailwind css
                    local inputCssPath outputCssPath
                    for i in "${inputCssArray[@]}"
                    do
                        echo -n "searching for input file $i:"
                        inputCssPath=$(find . -type f -name "$i")
                        if [ -n "$inputCssPath" ]; then
                            inputCssPath=$(single_out "$inputCssPath" "\n")
                            echo -e "${text_green}input path found at $inputCssPath${text_white}    "
                            for j in "${outputCssArray[@]}"
                            do
                                echo -n "searching for output file $j"
                                local outputCssPath
                                outputCssPath=$(find . -type f -name "$j")
                                if [ -n "$outputCssPath" ]; then
                                    outputCssPath=$(single_out "$outputCssPath")
                                    echo -e "${text_green}output path found at $outputCssPath${text_white}    "
                                    break
                                fi
                            done
                            break
                        fi
                        echo
                    done
                    remote_paths="$remote_paths inputCssPath=${inputCssPath} outputCssPath=${outputCssPath}"   
                fi
            fi
            echo "$remote_paths"
            ;;
        "status")
            if [ "$(check_site)" = 1 ]; then
                echo -e "${text_green}site '$exact_site' is active${text_white}"
            else 
                echo -e "${text_red}site '$exact_site' is dissable${text_white}"
            fi
            for k in "${remote_systemd_services[@]}"
            do
                local systemd_state
                systemd_state=$(check_systemd "$k")
                if [ "$systemd_state" = 1 ]; then
                    echo -e "${text_green}${k}.service is active${text_white}"
                else
                    echo -e "${text_red}${k}.service is inactive${text_white}"
                fi
            done
            ;;
        *)
         echo instruction unclear
         ;;
    esac
}


# ==============================================================================================================================
# configuration retrieval and editing
config_function () {
    echo lamp config: opens configuration file
    echo
    sudoedit "$configpath"
}

retrieveLocalConfig() {
    if [ -f $configpath ]; then
        source $configpath
        local missing
        missing=false
        for var in "${required_config_variables[@]}"; do
            if ! [[ -v $var ]]; then
                echo -e "${text_red}variable '$var' is missing${text_white}"
                local missing=true
            fi
        done

        if $missing; then
            if [ "$parameter1" = "config" ]; then
                config_function
                exit 0
            else
                terminate_with_error "Config file is missing variables \nCheck 'required_config_variables' at the start of this script for all variables needed"
            fi
        fi

        script_location="$(which $programename)"
    else
        case "${parameter1}" in
            "remote")
                remote_function
                exit 0
                ;;
            "config")
                config_function
                exit 0
                ;;
            *)
                terminate_with_error "${programename} cannot run without the config file \nMake sure an appropriate path is assigned to the varaible 'configpath' at the start of this script$"
                ;;
        esac
    fi
}

retrieveLocalConfig

# ==============================================================================================================================
# basic functions that don't rely on any other functions defined in the program

# gives integer values for state of the vm, where:
# value "1" means vm
check_vm_domain () {
    local state
    state=$(sudo virsh domstate "$vm_domain")
    case "${state}" in
        "running")
            echo 1
            ;;
        "paused")
            echo 2
            ;;
        "shut off")
            echo 0
            ;;
        *)
            terminate_with_error "unexpected vm state '$state', exiting"
            ;;
    esac
}


# ssh into vm host
ssh_vm () {
    # "check_ping" more accurately checks whether a vm is fully running
    check_ping () {
        local ping_result
        ping_result=$(ping -c 1 $vm_ip)
        if [[ "$ping_result" =~ "time=" ]] && [[ "$ping_result" =~ "1 received" ]]; then
            echo 1
        else
            echo 0
        fi
    }
    concatinate_config () {
        echo "'site=${site} inputCssNames=${inputCssNames} outputCssNames=${outputCssNames}'"
    }
    echo "checking ${vm_ip}'s network status"
    check_wait_repeate check_ping 1 3
    sleep 1
    local important_string
    important_string=$(concatinate_config)
    ssh "${vm_user}@${vm_ip}" 'bash -s' < "$script_location" "remote $1 $important_string"
}

# "find_net_status" determines the state of a vm network, where on is 1, off is 0
find_net_status () {
    local network_status
    network_status=$(sudo virsh net-info "$vm_network_name" | grep Active)
    if [[ "$network_status" =~ "yes" ]]; then
        echo 1
    else
        echo 0
    fi
}

# ==============================================================================================================================
# general functions

# "resume_vm" ensures vm is unsuspended
resume_vm () {
    sudo virsh resume "$vm_domain"
    condition_function () {
        local condition_vm_state
        condition_vm_state=$(check_vm_domain)
        if [ "$condition_vm_state" = 1 ]; then
            echo 1
        else
            echo 0
        fi
    }
    check_wait_repeate condition_function 0.2 3
}



# "start_vm" ensures vm is running
start_vm () {
    local vm_state
    vm_state=$(check_vm_domain)
    if [ "$vm_state" = 0 ] ; then
        sudo virsh start "$vm_domain"
        check_wait_repeate check_vm_domain 0.1 3
    else
        if [ "$vm_state" = 2 ] ; then
            echo -e "${text_yellow}vm was suspended, now resuming${text_white}"
            resume_vm
        else
            echo -e "${text_yellow}$vm_domain already running${text_white}"
        fi
    fi
}

# "start_libirtd" ensures libvirtd is running
start_libvirtd () {
    local libvirtd_state
    libvirtd_state=$(check_systemd "libvirtd")
    if [ "$libvirtd_state" = 0 ] ; then
        echo starting libvirtd
        sudo systemctl start libvirtd
        condition_function () {
            check_systemd libvirtd
        }
        check_wait_repeate condition_function 0.2 3
    else
        echo -e "${text_yellow}libvirtd.service is already running${text_white}"
    fi
}

# "start_vm_net" ensures that the virtual network (bridge) that the vm depends on is active"
start_vm_net () {
    if [ "$(find_net_status)" = 0 ]; then
        sudo virsh net-start "$vm_network_name"
        check_wait_repeate find_net_status 0.1 5
    else
        echo -e "${text_yellow}virtual network ${vm_network_name} is already active${text_white}"
    fi
}

# "stop_vm_net" ensures that the virtual network (bridge) is destroyed
stop_vm_net () {
    find_net_status_invert () {
        local status
        status=$(( 1 - $(find_net_status) ))
        echo $status
    }
    if [ "$(find_net_status)" = 1 ]; then
        sudo virsh net-destroy "$vm_network_name"
        check_wait_repeate find_net_status_invert 0.1 5
    else
        echo -e "${text_yellow}virtual network ${vm_network_name} is not active${text_white}"
    fi
}


# "stop_vm" ensures vm is shut down gracefully
stop_vm () {
    local vm_state
    vm_state=$(check_vm_domain)
    if [ "$vm_state" = 0 ]; then
        echo -e "${text_yellow}$vm_domain not running${text_white}"
    else
        if [ "$vm_state" = 2 ]; then
            resume_vm
        fi
        sudo virsh shutdown "$vm_domain"
        condition_function () {
            local condition_vm_state
            condition_vm_state=$(check_vm_domain)
            if [ "$condition_vm_state" = 0 ]; then
                echo 1
            else
                echo 0
            fi
        }
        check_wait_repeate condition_function 0.4 5
    fi
}

# "stop_libvirtd" ensures vm_domain is shutoff before stopping libvirtd.socket and libvirtd
stop_libvirtd () {
    local service service_state
    service="libvirtd"
    service_state=$(check_systemd $service)
    if [ "$service_state" = 1 ]; then
            ssh_vm stop
            stop_vm
            stop_vm_net
            echo stopping libvirtd
            sudo systemctl stop libvirtd.socket
            sudo systemctl stop libvirtd
            condition_function() {
                local condition_service_state
                condition_service_state=$(check_systemd "$service")
                if [ "$condition_service_state" = 0 ]; then
                    echo 1
                else
                    echo 0
                fi
            }
            check_wait_repeate condition_function 0.1 3
    else
        echo -e "${text_yellow}libvirtd.service is not running${text_white}"
    fi
}


# ==============================================================================================================================
# parameter handlers

start_function () {
    echo 'lamp start: starts vm and all necessary services, then open appropriet editors, logs and sites'
    echo
    start_libvirtd
    start_vm_net
    start_vm
    case "$parameter2" in
        "vm")
            ;;
        "server")
            ssh_vm start
            ;;
        *)
            ssh_vm start
            $terminal -- "$(pwd)/$programename" continue
            ;;
    esac
}

continue_function () {
    echo lamp continue: open editors and logs from current terminal
    echo 
    local working_directory error_log inputCssPath outputCssPath
    assignment_function () {
        case $1 in
            "working_directory")
                working_directory=$2
                ;;
            "error_log")
                error_log=$2
                ;;
            "inputCssPath")
                inputCssPath=$2
                ;;
            "outputCssPath")
                outputCssPath=$2
                ;;
        esac
    }
    local output remote_paths complete_failure
    complete_failure=1
    output=$(ssh_vm continue)
    remote_paths=$(echo "$output" | grep "{remote_paths}")
    output=${output%%'{remote_paths}'*}
    remote_paths=${remote_paths#"{remote_paths}"}
    spread_values "$remote_paths" assignment_function

    $browser "$vm_ip"
    
    if [ -n "$working_directory" ]; then
        complete_failure=0
        code --remote "ssh-remote+${vm_user}@${vm_ip}" "$working_directory"
    fi
    if [ -n "$inputCssPath" ] && [ -n "$outputCssPath" ]; then
        # this feature has not been tested
        complete_failure=0
        if [ -n "$error_log" ]; then
            ssh -t "${vm_user}@${vm_ip}" 'sudo tail -f /var/log/apache2/error.log &'
        fi
        ssh -t "${vm_user}@${vm_ip}" 'npx tailwindcss -i $inputCssPath -o $outputCssPath --watch'

    elif [ -n "$error_log" ]; then
        complete_failure=0
        ssh -t "${vm_user}@${vm_ip}" 'sudo tail -f /var/log/apache2/error.log'
    fi

    if [ "$complete_failure" = 1 ]; then
        echo No paths were retrieved, the remote output is as follows:
        echo "$output"
    fi
}

restart_function () {
    if [ "$parameter2" = "server" ]; then
        echo restarts apache2 on vm
        echo
        ssh_vm stop
        ssh_vm start
    else
        echo "reboots vm then start all necessary services"
        echo
        stop_libvirtd
        start_function
    fi
}

stop_function () {
    if [ "$parameter2" = "server" ]; then
            echo shutdown services on vm only
            echo
            ssh_vm stop
    else
        echo "lamp stop: shutdown vm, then close appropriet editors, logs and sites"
        echo
        stop_libvirtd
        pkill $programename
            echo "killing processes"
            local stringvaraible ifsparsablestring
            stringvaraible=$(pgrep -f "$programename")
            ifsparsablestring=$(echo "$stringvaraible" | tr '\n' 'a')
            IFS='a' read -r -a array <<< "$ifsparsablestring"

            for val in "${array[@]}";
            do
                echo "killing process: $val"
                kill -9 "$val"
            done
            echo
            echo "complete"
    fi
}

status_function () {
    echo lamp status: show status of vm, site, apache2, mysql...
    echo
    local libvirtd_state
    libvirtd_state=$(check_systemd libvirtd)
    if [ "$libvirtd_state" = 1 ]; then
        echo -e "${text_green}libvirtd is running${text_white}"
        if [ "$(find_net_status)" = 1 ]; then
            echo -e "${text_green}virtual network ${vm_network_name} is active${text_white}"
            case $(check_vm_domain) in
                "1")
                    echo -e "${text_green}vm domain ${vm_domain} is running${text_white}"
                    ssh_vm status
                    ;;
                "2")
                    echo -e "${text_yellow}vm domain ${vm_domain} is suspended${text_white}"
                    ;;
                "0")
                    echo -e "${text_red}vm domain ${vm_domain} is shutoff${text_white}"
                    ;;
            esac
        else
            echo -e "${text_red}virtual network ${vm_network_name} is inactive${text_white}"
        fi
    else
        echo -e "${text_red}libvirtd is inactive${text_white}"
    fi
}

test_function () {
    echo -e "${text_blue}doing test:${text_white}"
}

# ==============================================================================================================================
# checking for paramenters

case "${parameter1}" in
    "start")
        start_function
        ;;
    "continue")
        continue_function
        ;;
    "restart")
        restart_function
        ;;
    "stop")
        stop_function
        ;;
    "status")
        status_function
        ;;
    "config")
        config_function
        ;;
    "test")
        test_function
        ;;
    *)
        echo "argument not recognised"
        echo "
    lamp start: starts vm and all necessary services, then open appropriet editors, logs and sites
    lamp continue: open editors and logs from current terminal
    lamp restart: reboots vm then start all necessary services
    lamp restart server: restart apache2 on vm
    lamp stop: shutdown vm, then close appropriet editors, logs and sites
    lamp stop server: only stops services on vm
    lamp status: show status of vm, site, apache2, mysql...
    lamp config: opens configuration file"
        ;;
esac

# ==============================================================================================================================
# end of script